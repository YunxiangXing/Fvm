#ifndef LBM1_H
#define LBM1_H
#include"base\base.h"
#include"base\mesh.h"
#include<QtWidgets>
using namespace std;
//数据类型：坐标
struct coor {
	int x = 0, y = 0, z = 0;
	void A(int a, int b, int c) {
		x = a;
		y = b;
		z = c;
	};
};
//LBM三维单多松弛计算类
class LBM3D{
public:
	LBM3D();
	Mesh* getMesh();
	void sphere(float s_R);//sc模型：立方体中有一球体固相
	void init();//初始化
	float inline feq(int, float, vector<float>);//单松弛碰撞
	void mfeq(int, int, int);//多松弛碰撞
	void evolution(col, bj);//演化过程
	void errorr();//多孔介质误差分析
	double getEr();
	int getnum();
	void outputfirst();//输出导入的结构：用以验证导入是否正确
	void outputlast(string);//输出计算完成后结构：导入tecplot可视化
	double pos(int, int);//三维立方体泊肃叶流理论速度计算
	void cal(col, bj);//整体LBM过程的计算方案
	double kLB();//渗透率
	void evolution_coll(col);
	void evolution_bir(bj);
	void build();
	void setinlet(inlet);
	double k();//sc模型理论渗透率
	//~LBM3D() {
	//	cout << "析构函数" << endl;
	//	for (int i = 0; i < NX + 1; i++) {
	//		for (int j = 0; j < NY + 1; j++) {
	//			for (int k = 0; k < NZ + 1; k++) {
	//				delete[]f[i][j][k];
	//				delete[]F[i][j][k];
	//				delete[]u[i][j][k];
	//				delete[]u1[i][j][k];
	//				//cout << "释放" << "f1[" << i << "][" << j << "][" << k << "]" << endl;
	//			}
	//			delete[]f[i][j];
	//			delete[]F[i][j];
	//			delete[]u[i][j];
	//			delete[]u1[i][j];
	//			//cout << "释放" << "f1[" << i << "][" << j <<"]" << endl;
	//		}
	//		delete[]f[i];
	//		delete[]F[i];
	//		delete[]u[i];
	//		delete[]u1[i];
	//		cout << "释放" << "f/F/u/u1[" << i << "]" << endl;
	//	}
	//	delete[]u;
	//	delete[]u1;
	//	delete[]f;
	//	delete[]F;
	//};
	~LBM3D() {
		delete LBM_mesh;
	}
private:
	//D3Q19的速度分量和权重
	QTimer* LBM_timer = NULL;
	inlet LBM_inlet;
	const int Q = 19;
	int e[19][3] = { {0,0,0},{1,0,0},{-1,0,0},{0,1,0},{0,-1,0},{0,0,1},{0,0,-1},{1,1,0},
		{-1,-1,0},{1,0,1},{-1,0,-1},{0,1,1},{0,-1,-1},{1,-1,0},{-1,1,0},{1,0,-1},{-1,0,1},
		{0,1,-1},{0,-1,1}
	};
	float w[19] = { 1.0 / 3,1.0 / 18,1.0 / 18,1.0 / 18,1.0 / 18,1.0 / 18,1.0 / 18,1.0 / 36,
		1.0 / 36,1.0 / 36,1.0 / 36,1.0 / 36,1.0 / 36,1.0 / 36,1.0 / 36,1.0 / 36,1.0 / 36,
		1.0 / 36,1.0 / 36 };
	Mesh* LBM_mesh = NULL;
	//迭代次数
	int num = 0;
	//误差
	int NX = 0, NY = 0, NZ = 0;
	double Er;
	double Er1;
	//sc模型球体半径大小
	float R;
	//物理模型的尺寸
	double LL;
	vector<vector<vector<vector<float>>>>f, F, u, u1;
	vector<vector<vector<float>>>rho;
	const double pi = 3.1415926535;
	//三维三方向格子点数量
	//计算泊肃叶流时可选取NX=NY=NZ=50
	//计算sc模型或BCC、FCC时刻可选取NX=NY=NZ=50
	//计算多孔介质时一般选取NX=209，NY=NZ=201
	//分布函数，宏观速度和宏观密度
	//储存多孔介质的数组
	//多松弛的转换矩阵
	double M[19][19] = {
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		{-30,-11,-11,-11,-11,-11,-11,8,8,8,8,8,8,8,8,8,8,8,8},
		{12,-4,-4,-4,-4,-4,-4,1,1,1,1,1,1,1,1,1,1,1,1},
		{0,1,-1,0,0,0,0,1,-1,1,-1,0,0,1,-1,1,-1,0,0},
		{0,-4,4,0,0,0,0,1,-1,1,-1,0,0,1,-1,1,-1,0,0},
		{0,0,0,1,-1,0,0,1,-1,0,0,1,-1,-1,1,0,0,1,-1},
		{0,0,0,-4,4,0,0,1,-1,0,0,1,-1,-1,1,0,0,1,-1},
		{0,0,0,0,0,1,-1,0,0,1,-1,1,-1,0,0,-1,1,-1,1},
		{0,0,0,0,0,-4,4,0,0,1,-1,1,-1,0,0,-1,1,-1,1},
		{0,2,2,-1,-1,-1,-1,1,1,1,1,-2,-2,1,1,1,1,-2,-2},
		{0,-4,-4,2,2,2,2,1,1,1,1,-2,-2,1,1,1,1,-2,-2},
		{0,0,0,1,1,-1,-1,1,1,-1,-1,0,0,1,1,-1,-1,0,0},
		{0,0,0,-2,-2,2,2,1,1,-1,-1,0,0,1,1,-1,-1,0,0},
		{0,0,0,0,0,0,0,1,1,0,0,0,0,-1,-1,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,-1,-1},
		{0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,-1,-1,0,0},
		{0,0,0,0,0,0,0,1,-1,-1,1,0,0,1,-1,-1,1,0,0},
		{0,0,0,0,0,0,0,-1,1,0,0,1,-1,1,-1,0,0,1,-1},
		{0,0,0,0,0,0,0,0,0,1,-1,-1,1,0,0,-1,1,1,-1} };
	//转换矩阵的逆矩阵
	double InvM[19][19] = {
		{1.0 / 19.0,-5.0 / 399.0,1.0 / 21.0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{1.0 / 19.0,-11.0 / 2394,-1.0 / 63.0,0.1,-0.1,0,0,0,0,1.0 / 18.0,-1.0 / 18.0,0,0,0,0,0,0,0,0},
		{1.0 / 19.0,-11.0 / 2394,-1.0 / 63.0,-0.1,0.1,0,0,0,0,1.0 / 18.0,-1.0 / 18.0,0,0,0,0,0,0,0,0},
		{1.0 / 19.0,-11.0 / 2394,-1.0 / 63.0,0,0,0.1,-0.1,0,0,-1.0 / 36.0,1.0 / 36.0,1.0 / 12.0,-1.0 / 12.0,0,0,0,0,0,0},
		{1.0 / 19.0,-11.0 / 2394,-1.0 / 63.0,0,0,-0.1,0.1,0,0,-1.0 / 36.0,1.0 / 36.0,1.0 / 12.0,-1.0 / 12.0,0,0,0,0,0,0},
		{1.0 / 19.0,-11.0 / 2394,-1.0 / 63.0,0,0,0,0,0.1,-0.1,-1.0 / 36.0,1.0 / 36.0,-1.0 / 12.0,1.0 / 12.0,0,0,0,0,0,0},
		{1.0 / 19.0,-11.0 / 2394,-1.0 / 63.0,0,0,0,0,-0.1,0.1,-1.0 / 36.0,1.0 / 36.0,-1.0 / 12.0,1.0 / 12.0,0,0,0,0,0,0},
		{1.0 / 19.0,4.0 / 1197.0,1.0 / 252.0,0.1,0.025,0.1,0.025,0,0,1.0 / 36.0,1.0 / 72.0,1.0 / 12.0,1.0 / 24.0,0.25,0,0,0.125,-0.125,0},
		{1.0 / 19.0,4.0 / 1197.0,1.0 / 252,-0.1,-0.025,-0.1,-0.025,0,0,1.0 / 36.0,1.0 / 72.0,1.0 / 12.0,1.0 / 24.0,0.25,0,0,-0.125,0.125,0},
		{1.0 / 19.0,4.0 / 1197.0,1.0 / 252,0.1,0.025,0,0,0.1,0.025,1.0 / 36.0,1.0 / 72.0,-1.0 / 12.0,-1.0 / 24.0,0,0,0.25,-0.125,0,0.125},
		{1.0 / 19.0,4.0 / 1197.0,1.0 / 252,-0.1,-0.025,0,0,-0.1,-0.025,1.0 / 36.0,1.0 / 72.0,-1.0 / 12.0,-1.0 / 24.0,0,0,0.25,0.125,0,-0.125},
		{1.0 / 19.0,4.0 / 1197.0,1.0 / 252,0,0,0.1,0.025,0.1,0.025,-1.0 / 18.0,-1.0 / 36.0,0,0,0,0.25,0,0,0.125,-0.125},
		{1.0 / 19.0,4.0 / 1197.0,1.0 / 252,0,0,-0.1,-0.025,-0.1,-0.025,-1.0 / 18.0,-1.0 / 36.0,0,0,0,0.25,0,0,-0.125,0.125},
		{1.0 / 19.0,4.0 / 1197.0,1.0 / 252,0.1,0.025,-0.1,-0.025,0,0,1.0 / 36.0,1.0 / 72.0,1.0 / 12.0,1.0 / 24.0,-0.25,0,0,0.125,0.125,0},
		{1.0 / 19.0,4.0 / 1197.0,1.0 / 252,-0.1,-0.025,0.1,0.025,0,0,1.0 / 36.0,1.0 / 72.0,1.0 / 12.0,1.0 / 24.0,-0.25,0,0,-0.125,-0.125,0},
		{1.0 / 19.0,4.0 / 1197.0,1.0 / 252,0.1,0.025,0,0,-0.1,-0.025,1.0 / 36.0,1.0 / 72.0,-1.0 / 12.0,-1.0 / 24.0,0,0,-0.25,-0.125,0,-0.125},
		{1.0 / 19.0,4.0 / 1197.0,1.0 / 252,-0.1,-0.025,0,0,0.1,0.025,1.0 / 36.0,1.0 / 72.0,-1.0 / 12.0,-1.0 / 24.0,0,0,-0.25,0.125,0,0.125},
		{1.0 / 19.0,4.0 / 1197.0,1.0 / 252,0,0,0.1,0.025,-0.1,-0.025,-1.0 / 18.0,-1.0 / 36.0,0,0,0,-0.25,0,0,0.125,0.125},
		{1.0 / 19.0,4.0 / 1197.0,1.0 / 252,0,0,-0.1,-0.025,0.1,0.025,-1.0 / 18.0,-1.0 / 36.0,0,0,0,-0.25,0,0,-0.125,-0.125}
	};
	//为计算方便，提高效率，多松弛使用此矩阵：M-1*S*M
	float invM_S_M[19][19] = {
	{0.947368421052632,-0.0526315789473684,-0.0526315789473684,-0.0526315789473684,-0.0526315789473684,-0.0526315789473684,-0.0526315789473684,-0.0526315789473684,-0.0526315789473684,-0.0526315789473684,-0.0526315789473684,-0.0526315789473684,-0.0526315789473684,-0.0526315789473684,-0.0526315789473684,-0.0526315789473684,-0.0526315789473684,-0.0526315789473684,-0.0526315789473684},
	{-0.0526315789473684,0.904511278195489,-0.0097744360902256,-0.0526315789473684,-0.0526315789473684,-0.0526315789473684,-0.0526315789473684,-0.166917293233083,0.0616541353383459,-0.166917293233083,0.0616541353383459,-0.0526315789473684,-0.0526315789473684,-0.166917293233083,0.0616541353383459,-0.166917293233083,0.0616541353383459,-0.0526315789473684,-0.0526315789473684},
	{-0.0526315789473684,-0.0097744360902256,0.904511278195489,-0.0526315789473684,-0.0526315789473684,-0.0526315789473684,-0.0526315789473684,0.0616541353383459,-0.166917293233083,0.0616541353383459,-0.166917293233083,-0.0526315789473684,-0.0526315789473684,0.0616541353383459,-0.166917293233083,0.0616541353383459,-0.166917293233083,-0.0526315789473684,-0.0526315789473684},
	{-0.0526315789473684,-0.0526315789473684,-0.0526315789473684,0.904511278195489,-0.00977443609022557,-0.0526315789473684,-0.0526315789473684,-0.166917293233083,0.0616541353383459,-0.0526315789473684,-0.0526315789473684,-0.166917293233083,0.0616541353383459,0.0616541353383459,-0.166917293233083,-0.0526315789473684,-0.0526315789473684,-0.166917293233083,0.0616541353383459},
	{-0.0526315789473684,-0.0526315789473684,-0.0526315789473684,-0.00977443609022557,0.904511278195489,-0.0526315789473684,-0.0526315789473684,0.0616541353383459,-0.166917293233083,-0.0526315789473684,-0.0526315789473684,0.0616541353383459,-0.166917293233083,-0.166917293233083,0.0616541353383459,-0.0526315789473684,-0.0526315789473684,0.0616541353383459,-0.166917293233083},
	{-0.0526315789473684,-0.0526315789473684,-0.0526315789473684,-0.0526315789473684,-0.0526315789473684,0.904511278195489,-0.00977443609022557,-0.0526315789473684,-0.0526315789473684,-0.166917293233083,0.0616541353383459,-0.166917293233083,0.0616541353383459,-0.0526315789473684,-0.0526315789473684,0.0616541353383459,-0.166917293233083,0.0616541353383459,-0.166917293233083},
	{-0.0526315789473684,-0.0526315789473684,-0.0526315789473684,-0.0526315789473684,-0.0526315789473684,-0.00977443609022557,0.904511278195489,-0.0526315789473684,-0.0526315789473684,0.0616541353383459,-0.166917293233083,0.0616541353383459,-0.166917293233083,-0.0526315789473684,-0.0526315789473684,-0.166917293233083,0.0616541353383459,-0.166917293233083,0.0616541353383459},
	{-0.0526315789473684,-0.166917293233083,0.0616541353383459,-0.166917293233083,0.0616541353383459,-0.0526315789473684,-0.0526315789473684,0.790225563909774,0.104511278195489,-0.166917293233083,0.0616541353383459,-0.166917293233083,0.0616541353383459,-0.0526315789473684,-0.0526315789473684,-0.166917293233083,0.0616541353383459,-0.166917293233083,0.0616541353383459},
	{-0.0526315789473684,0.0616541353383459,-0.166917293233083,0.0616541353383459,-0.166917293233083,-0.0526315789473684,-0.0526315789473684,0.104511278195489,0.790225563909774,0.0616541353383459,-0.166917293233083,0.0616541353383459,-0.166917293233083,-0.0526315789473684,-0.0526315789473684,0.0616541353383459,-0.166917293233083,0.0616541353383459,-0.166917293233083},
	{-0.0526315789473684,-0.166917293233083,0.0616541353383459,-0.0526315789473684,-0.0526315789473684,-0.166917293233083,0.0616541353383459,-0.166917293233083,0.0616541353383459,0.790225563909774,0.104511278195489,-0.166917293233083,0.0616541353383459,-0.166917293233083,0.0616541353383459,-0.0526315789473684,-0.0526315789473684,0.0616541353383459,-0.166917293233083},
	{-0.0526315789473684,0.0616541353383459,-0.166917293233083,-0.0526315789473684,-0.0526315789473684,0.0616541353383459,-0.166917293233083,0.0616541353383459,-0.166917293233083,0.104511278195489,0.790225563909774,0.0616541353383459,-0.166917293233083,0.0616541353383459,-0.166917293233083,-0.0526315789473684,-0.0526315789473684,-0.166917293233083,0.0616541353383459},
	{-0.0526315789473684,-0.0526315789473684,-0.0526315789473684,-0.166917293233083,0.0616541353383459,-0.166917293233083,0.0616541353383459,-0.166917293233083,0.0616541353383459,-0.166917293233083,0.0616541353383459,0.790225563909774,0.104511278195489,0.0616541353383459,-0.166917293233083,0.0616541353383459,-0.166917293233083,-0.0526315789473684,-0.0526315789473684},
	{-0.0526315789473684,-0.0526315789473684,-0.0526315789473684,0.0616541353383459,-0.166917293233083,0.0616541353383459,-0.166917293233083,0.0616541353383459,-0.166917293233083,0.0616541353383459,-0.166917293233083,0.104511278195489,0.790225563909774,-0.166917293233083,0.0616541353383459,-0.166917293233083,0.0616541353383459,-0.0526315789473684,-0.0526315789473684},
	{-0.0526315789473684,-0.166917293233083,0.0616541353383459,0.0616541353383459,-0.166917293233083,-0.0526315789473684,-0.0526315789473684,-0.0526315789473684,-0.0526315789473684,-0.166917293233083,0.0616541353383459,0.0616541353383459,-0.166917293233083,0.790225563909774,0.104511278195489,-0.166917293233083,0.0616541353383459,0.0616541353383459,-0.166917293233083},
	{-0.0526315789473684,0.0616541353383459,-0.166917293233083,-0.166917293233083,0.0616541353383459,-0.0526315789473684,-0.0526315789473684,-0.0526315789473684,-0.0526315789473684,0.0616541353383459,-0.166917293233083,-0.166917293233083,0.0616541353383459,0.104511278195489,0.790225563909774,0.0616541353383459,-0.166917293233083,-0.166917293233083,0.0616541353383459},
	{-0.0526315789473684,-0.166917293233083,0.0616541353383459,-0.0526315789473684,-0.0526315789473684,0.0616541353383459,-0.166917293233083,-0.166917293233083,0.0616541353383459,-0.0526315789473684,-0.0526315789473684,0.0616541353383459,-0.166917293233083,-0.166917293233083,0.0616541353383459,0.790225563909774,0.104511278195489,-0.166917293233083,0.0616541353383459},
	{-0.0526315789473684,0.0616541353383459,-0.166917293233083,-0.0526315789473684,-0.0526315789473684,-0.166917293233083,0.0616541353383459,0.0616541353383459,-0.166917293233083,-0.0526315789473684,-0.0526315789473684,-0.166917293233083,0.0616541353383459,0.0616541353383459,-0.166917293233083,0.104511278195489,0.790225563909774,0.0616541353383459,-0.166917293233083},
	{-0.0526315789473684,-0.0526315789473684,-0.0526315789473684,-0.166917293233083,0.0616541353383459,0.0616541353383459,-0.166917293233083,-0.166917293233083,0.0616541353383459,0.0616541353383459,-0.166917293233083,-0.0526315789473684,-0.0526315789473684,0.0616541353383459,-0.166917293233083,-0.166917293233083,0.0616541353383459,0.790225563909774,0.104511278195489},
	{-0.0526315789473684,-0.0526315789473684,-0.0526315789473684,0.0616541353383459,-0.166917293233083,-0.166917293233083,0.0616541353383459,0.0616541353383459,-0.166917293233083,-0.166917293233083,0.0616541353383459,-0.0526315789473684,-0.0526315789473684,-0.166917293233083,0.0616541353383459,0.0616541353383459,-0.166917293233083,0.104511278195489,0.790225563909774}
	};
	float tao_f = 1.0;//松弛系数
	double Sv = 1.0 / tao_f;//多松弛松弛系数
	//多松弛对角松弛矩阵
	double S[19] = { 0,Sv,Sv,0,8.0 * (2.0 - Sv) / (8.0 - Sv),0,8.0 * (2.0 - Sv) / (8.0 - Sv),
	0,8.0 * (2.0 - Sv) / (8.0 - Sv) ,Sv,Sv,Sv,Sv,Sv,Sv,Sv,8.0 * (2.0 - Sv) / (8.0 - Sv),
	8.0 * (2.0 - Sv) / (8.0 - Sv) ,8.0 * (2.0 - Sv) / (8.0 - Sv) };
};
#endif // LBM1